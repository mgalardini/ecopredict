#!/usr/bin/env python

__author__ = "Marco Galardini"
__version__ = '0.1.0'


def get_options():
    import argparse

    # create the top-level parser
    description = "Run phenotypes plots"
    parser = argparse.ArgumentParser(description=description,
                                     prog='run_phenotypes_plot')
    parser.add_argument('pic', action='store',
                        help='PIC file')
    parser.add_argument('nodes', action='store',
                        help='Nodes distances file')
    parser.add_argument('outfile', action='store',
                        help='Output file')

    parser.add_argument('--size', action='store',
                        type=int,
                        default=1,
                        help='Figure size multiplier [Default: 1 inches]')
    parser.add_argument('--dpi', action='store',
                        type=int,
                        default=300,
                        help='DPI [Default: 300]')
    
    parser.add_argument('--version', action='version',
                        version='%(prog)s '+__version__)

    return parser.parse_args()

if __name__ == "__main__":
    import numpy as np
    import pandas as pd
    from scipy import stats
    from nadist.pure.spatial import euclidean_pdist
    from scipy.spatial.distance import pdist, squareform

    options = get_options()

    import matplotlib.pyplot as plt
    import seaborn as sns
    import matplotlib as mpl
    import matplotlib.cm as cm
    import matplotlib.patches as patches

    sns.set_style('white')

    plt.rc('font', family='sans-serif') 
    plt.rc('font', serif='Arial') 
    plt.rc('text', usetex='false')
    
    try:
        plt.style.use('custom.mplstyle')
    except IOError:
        plt.rc('font', size=10)
        plt.rc('xtick', labelsize=10)
        plt.rc('ytick', labelsize=10)
        plt.rc('axes', labelsize=12, titlesize=12)
        plt.rc('legend', fontsize=8)

    m = pd.read_table(options.pic, sep=',', index_col=0)
    n = pd.read_table(options.nodes, sep=',', index_col=0)

    p = pd.DataFrame(squareform(euclidean_pdist(m.values)),
                     index=[str(x) for x in m.index],
                     columns=[str(x) for x in m.index])
    c = m.T.corr()

    n = n.mask(np.triu(np.ones(n.shape)).astype(bool)).stack()

    p = p.stack().loc[[(str(x[0]), str(x[1])) for x in n.index]]
    c = c.stack().loc[[(int(x[0]), int(x[1])) for x in p.index]]

    n.name = 'n'
    p.name = 'p'

    n = n.reset_index()
    n['level_0'] = [int(x) for x in n['level_0']]
    n['level_1'] = [int(x) for x in n['level_1']]
    n = n.set_index(['level_0',
                     'level_1'])['n']
    p = p.reset_index()
    p['level_0'] = [int(x) for x in p['level_0']]
    p['level_1'] = [int(x) for x in p['level_1']]
    p = p.set_index(['level_0',
                     'level_1'])['p']

    p[np.isinf(p)] = np.nan

    r = n.to_frame().join(p.to_frame()).dropna()

    n = r['n']
    p = r['p']

    plt.figure(figsize=(3*options.size,
                        3*options.size))

    tmp = plt.plot(n,
                   p,
                   'k.',
                   alpha=0.1,
                   label='_')
    for t in tmp:
        t.set_rasterized(True)

    l = stats.linregress(n,
                         p)
    print(l.rvalue, l.pvalue)
    fn = l.intercept + l.slope * np.linspace(0, n.max())
    plt.plot(np.linspace(0, n.max()),
             fn,
             'r--',
             label='Pearson\'s r: %.2f' % l.rvalue)

    plt.legend(loc='upper right',
               bbox_to_anchor=(1.1, 1),
               frameon=True)

    plt.xlabel('Phylogenetic distance')
    plt.ylabel('Phenotypic distance')

    sns.despine()
    plt.tight_layout()

    plt.savefig(options.outfile,
                dpi=options.dpi)
